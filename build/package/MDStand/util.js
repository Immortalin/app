// Generated by CoffeeScript 1.3.3
var LOCAL;

LOCAL = false;

window.onerror = function(message, url, lineNumber) {
  var _ref;
  if (typeof ga_storage !== "undefined" && ga_storage !== null) {
    ga_storage._trackEvent('general', 'App Error', (_ref = util.ctl('Main').deviceId) != null ? _ref : 'device id not yet set');
  }
  return false;
};

window.util = {
  WEB_SERVICE_BASE_URL: LOCAL ? "http://localhost:3000/" : "https://service.mdstand.com/",
  RESOURCES_BASE_URL: LOCAL ? "http://localhost/mdstand/resources/" : "https://mdstand-resources.s3.amazonaws.com/mobile/resources/",
  ctl: function(controllerName) {
    return MDStand.app.getController(controllerName);
  },
  strToTitleCase: function(str) {
    return str.replace(/\w\S*/g, function(word) {
      return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase();
    });
  },
  getNameFromFormIdAlias: function(alias) {
    var temp;
    temp = alias.split("-");
    if (/\d{5}$/.test(temp[temp.length - 1])) {
      return this.strToTitleCase(alias.replace(/-/g, " ").split(" ").slice(1).slice(0, -1).join(" "));
    } else {
      return this.strToTitleCase(alias.replace(/-/g, " "));
    }
  },
  getAllItemsWhichAreFields: function(x, acc) {
    var item, _i, _len, _ref;
    if (acc == null) {
      acc = [];
    }
    for (_i = 0, _len = x.length; _i < _len; _i++) {
      item = x[_i];
      if (((_ref = item.items) != null ? _ref.length : void 0) > 0) {
        acc.concat(this.getAllItemsWhichAreFields(item.items, acc));
      } else if ('field' === item['xtype'].substr(item['xtype'].length - 5)) {
        acc.push(item);
      }
    }
    return acc;
  },
  getFieldsFromItems: function(x) {
    return x.map(function(item) {
      return {
        name: item['name'],
        type: item['type']
      };
    });
  },
  getValidationsFromItems: function(x) {
    var item, validations, _i, _len, _ref;
    validations = [];
    for (_i = 0, _len = x.length; _i < _len; _i++) {
      item = x[_i];
      if (item['required']) {
        validations.push({
          type: 'presence',
          name: item['name']
        });
      }
      if (((_ref = item['component']) != null ? _ref['type'] : void 0) === 'tel') {
        validations.push({
          type: 'format',
          matcher: /^(\+)?([0-9]|\(|\)|-|\s)*$/,
          name: item['name']
        });
      }
      if ((item['validations'] != null) && -1 !== item['validations'].indexOf('zip')) {
        validations.push({
          type: 'format',
          matcher: /^([0-9]|-)*$/,
          name: item['name']
        });
      }
    }
    return validations;
  },
  demandConsentFormAgreement: function(form) {
    if ((form.config.hasAgreedToConsentForm != null) && !form.config.hasAgreedToConsentForm) {
      navigator.notification.alert("You must first agree to the Consent Form. Tap on the button to view\nthe Consent Form, and then tap the button that says \"I have read and\nunderstood this document.\"", (function() {}));
      return false;
    } else {
      return true;
    }
  },
  demandValidForm: function(form) {
    var error, errors, fieldItems, model, tempModelDefinitionName, _i, _len, _ref;
    if (!this.demandConsentFormAgreement(form)) {
      return false;
    }
    fieldItems = this.getAllItemsWhichAreFields(form.config.formConfig);
    tempModelDefinitionName = "TempModelDefinition" + (Math.floor(Math.random() * 999999));
    Ext.define(tempModelDefinitionName, {
      extend: 'Ext.data.Model',
      config: {
        fields: this.getFieldsFromItems(fieldItems),
        validations: this.getValidationsFromItems(fieldItems)
      }
    });
    model = Ext.create(tempModelDefinitionName, form.getValues());
    errors = model.validate();
    if (!errors.isValid()) {
      _ref = errors.all;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        error = _ref[_i];
        form.query("[name='" + (error.getField()) + "']")[0].addCls('invalid-field');
      }
      return false;
    } else {
      return true;
    }
  },
  hasAnyFields: function(f, acc) {
    var item, _i, _len, _ref, _ref1;
    if (acc == null) {
      acc = false;
    }
    if (!acc) {
      _ref = (f instanceof Array ? f : f.items);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        if (((_ref1 = item.items) != null ? _ref1.length : void 0) > 0) {
          acc = acc || this.hasAnyFields(item.items, acc);
        } else if (item['xtype'].substr(-5) === "field") {
          return true;
        }
      }
    }
    return acc;
  }
};
