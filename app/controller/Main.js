// Generated by CoffeeScript 1.3.3

Ext.define('Purple.controller.Main', {
  extend: 'Ext.app.Controller',
  config: {
    refs: {
      mainContainer: 'maincontainer',
      topToolbar: 'toptoolbar',
      loginForm: 'loginform',
      requestGasTabContainer: '#requestGasTabContainer',
      mapForm: 'mapform',
      map: '#gmap',
      spacerBetweenMapAndAddress: '#spacerBetweenMapAndAddress',
      requestAddressField: '#requestAddressField',
      requestGasButtonContainer: '#requestGasButtonContainer',
      autocompleteList: '#autocompleteList',
      backToMapButton: '#backToMapButton',
      requestForm: 'requestform'
    },
    control: {
      mapForm: {
        recenterAtUserLoc: 'recenterAtUserLoc'
      },
      map: {
        centerchange: 'adjustDeliveryLocByLatLng',
        maprender: 'initGeocoder'
      },
      requestAddressField: {
        generateSuggestions: 'generateSuggestions',
        addressInputMode: 'addressInputMode'
      },
      autocompleteList: {
        updateDeliveryLocAddressByLocArray: 'updateDeliveryLocAddressByLocArray'
      },
      backToMapButton: {
        mapMode: 'mapMode',
        recenterAtUserLoc: 'recenterAtUserLoc'
      },
      requestGasButtonContainer: {
        initRequestGasForm: 'initRequestGasForm'
      },
      requestForm: {
        backToMap: 'backToMapFromRequestForm'
      }
    }
  },
  mapInitiallyCenteredYet: false,
  mapInited: false,
  launch: function() {
    this.callParent(arguments);
    this.gpsIntervalRef = setInterval(Ext.bind(this.updateLatlng, this), 10000);
    this.updateLatlng();
    setTimeout(Ext.bind(this.updateLatlng, this), 2000);
    setTimeout(Ext.bind(this.updateLatlng, this), 5000);
    if (localStorage['purpleUserId'] != null) {
      return console.log('user is logged in with id: ', localStorage['purpleUserId']);
    }
  },
  updateLatlng: function() {
    var _ref,
      _this = this;
    if ((_ref = this.updateLatlngBusy) == null) {
      this.updateLatlngBusy = false;
    }
    if (!this.updateLatlngBusy) {
      this.updateLatlngBusy = true;
      return navigator.geolocation.getCurrentPosition((function(position) {
        _this.updateLatlngBusy = false;
        _this.lat = position.coords.latitude;
        _this.lng = position.coords.longitude;
        if (!_this.mapInitiallyCenteredYet && _this.mapInited) {
          _this.mapInitiallyCenteredYet = true;
          return _this.recenterAtUserLoc();
        }
      }), (function() {
        return _this.updateLatlngBusy = false;
      }), {
        maximumAge: 0,
        enableHighAccuracy: true
      });
    }
  },
  initGeocoder: function() {
    this.geocoder = new google.maps.Geocoder();
    this.placesService = new google.maps.places.PlacesService(this.getMap().getMap());
    return this.mapInited = true;
  },
  adjustDeliveryLocByLatLng: function() {
    var center;
    center = this.getMap().getMap().getCenter();
    this.deliveryLocLat = center.lat();
    this.deliveryLocLng = center.lng();
    return this.updateDeliveryLocAddressByLatLng(this.deliveryLocLat, this.deliveryLocLng);
  },
  updateDeliveryLocAddressByLatLng: function(lat, lng) {
    var latlng, _ref,
      _this = this;
    latlng = new google.maps.LatLng(lat, lng);
    return (_ref = this.geocoder) != null ? _ref.geocode({
      'latLng': latlng
    }, function(results, status) {
      var addressComponents, streetAddress;
      if (status === google.maps.GeocoderStatus.OK) {
        if (results[1]) {
          addressComponents = results[0]['address_components'];
          streetAddress = "" + addressComponents[0]['short_name'] + " " + addressComponents[1]['short_name'];
          return _this.getRequestAddressField().setValue(streetAddress);
        } else {
          return console.log('No results found.');
        }
      } else {
        return console.log('Geocoder failed due to: ' + status);
      }
    }) : void 0;
  },
  mapMode: function() {
    this.getAutocompleteList().hide();
    this.getBackToMapButton().hide();
    this.getMap().show();
    this.getSpacerBetweenMapAndAddress().show();
    this.getRequestGasButtonContainer().show();
    return this.getRequestAddressField().disable();
  },
  recenterAtUserLoc: function() {
    return this.getMap().getMap().setCenter(new google.maps.LatLng(this.lat, this.lng));
  },
  addressInputMode: function() {
    this.getMap().hide();
    this.getSpacerBetweenMapAndAddress().hide();
    this.getRequestGasButtonContainer().hide();
    this.getAutocompleteList().show();
    this.getBackToMapButton().show();
    this.getRequestAddressField().enable();
    return this.getRequestAddressField().focus();
  },
  generateSuggestions: function() {
    var query, suggestions;
    query = this.getRequestAddressField().getValue();
    suggestions = new Array();
    return Ext.Ajax.request({
      url: "https://maps.googleapis.com/maps/api/place/autocomplete/json?types=establishment|geocode&radius=100&location=" + this.lat + "," + this.lng + "&sensor=true&key=AIzaSyA0p8k_hdb6m-xvAOosuYQnkDwjsn8NjFg",
      params: {
        'input': query
      },
      timeout: 30000,
      method: 'GET',
      scope: this,
      success: function(response) {
        var isAddress, locationName, p, resp, _i, _len, _ref, _ref1;
        resp = Ext.JSON.decode(response.responseText);
        if (resp.status === 'OK') {
          _ref = resp.predictions;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            p = _ref[_i];
            isAddress = p.terms[0].value === "" + parseInt(p.terms[0].value);
            locationName = isAddress ? p.terms[0].value + " " + ((_ref1 = p.terms[1]) != null ? _ref1.value : void 0) : p.terms[0].value;
            suggestions.push({
              'locationName': locationName,
              'locationVicinity': p.description.replace(locationName + ', ', ''),
              'locationLat': '0',
              'locationLng': '0',
              'placeId': p.place_id
            });
          }
          return this.getAutocompleteList().getStore().setData(suggestions);
        }
      }
    });
  },
  updateDeliveryLocAddressByLocArray: function(loc) {
    var _this = this;
    this.getRequestAddressField().setValue(loc['locationName']);
    this.mapMode();
    this.deliveryLocLat = 0;
    this.deliveryLocLng = 0;
    return this.placesService.getDetails({
      placeId: loc['placeId']
    }, function(place, status) {
      var latlng;
      if (status === google.maps.places.PlacesServiceStatus.OK) {
        latlng = place.geometry.location;
        _this.deliveryLocLat = latlng.lat();
        _this.deliveryLocLng = latlng.lng();
        _this.getMap().getMap().setCenter(latlng);
        return _this.getMap().getMap().setZoom(17);
      } else {
        return console.log('placesService error' + status);
      }
    });
  },
  initRequestGasForm: function() {
    var deliveryLocName;
    if (!(localStorage['purpleUserId'] != null)) {
      return this.getMainContainer().getItems().getAt(0).select(1, false, false);
    } else {
      deliveryLocName = this.getRequestAddressField().getValue();
      return this.getRequestGasTabContainer().setActiveItem(Ext.create('Purple.view.RequestForm', {
        lat: this.deliveryLocLat,
        lng: this.deliveryLocLng,
        address_street: deliveryLocName
      }));
    }
  },
  backToMapFromRequestForm: function() {
    return this.getRequestGasTabContainer().remove(this.getRequestGasTabContainer().getActiveItem(), true);
  }
});
