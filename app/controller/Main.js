// Generated by CoffeeScript 1.3.3

Ext.define('Purple.controller.Main', {
  extend: 'Ext.app.Controller',
  requires: ['Purple.view.MapForm', 'Purple.view.RequestForm'],
  config: {
    refs: {
      mainContainer: 'maincontainer',
      topToolbar: 'toptoolbar',
      menuButton: '[ctype=menuButton]',
      mapForm: 'mapform',
      map: '#gmap',
      requestAddressField: '#requestAddressField'
    },
    control: {
      menuButton: {
        menuButtonTap: 'menuButtonHandler'
      },
      map: {
        centerchange: 'adjustDeliveryLocByLatLng',
        maprender: 'initGeocoder'
      }
    }
  },
  launch: function() {
    this.callParent(arguments);
    this.gpsIntervalRef = setInterval(Ext.bind(this.updateLatlng, this), 10000);
    return this.updateLatlng();
  },
  updateLatlng: function() {
    var _ref,
      _this = this;
    if ((_ref = this.updateLatlngBusy) == null) {
      this.updateLatlngBusy = false;
    }
    if (!this.updateLatlngBusy) {
      this.updateLatlngBusy = true;
      return navigator.geolocation.getCurrentPosition((function(position) {
        var latLngWasSet;
        _this.updateLatlngBusy = false;
        latLngWasSet = _this.lat != null;
        _this.lat = position.coords.latitude;
        _this.lng = position.coords.longitude;
        if (!latLngWasSet) {
          return _this.getMap().getMap().setCenter(new google.maps.LatLng(_this.lat, _this.lng));
        }
      }), (function() {
        return _this.updateLatlngBusy = false;
      }), {
        maximumAge: 0,
        enableHighAccuracy: true
      });
    }
  },
  menuButtonHandler: function() {
    return this.getMainContainer().toggleContainer();
  },
  initGeocoder: function() {
    console.log('in here', google, google.maps);
    return this.geocoder = new google.maps.Geocoder();
  },
  adjustDeliveryLocByLatLng: function() {
    var center;
    center = this.getMap().getMap().getCenter();
    this.deliveryLocLat = center.lat();
    this.deliveryLocLng = center.lng();
    return this.updateDeliveryLocAddressByLatLng(this.deliveryLocLat, this.deliveryLocLng);
  },
  updateDeliveryLocAddressByLatLng: function(lat, lng) {
    var latlng,
      _this = this;
    latlng = new google.maps.LatLng(lat, lng);
    console.log(this.geocoder);
    return this.geocoder.geocode({
      'latLng': latlng
    }, function(results, status) {
      var addressComponents, streetAddress;
      if (status === google.maps.GeocoderStatus.OK) {
        if (results[1]) {
          console.log(results);
          addressComponents = results[0]['address_components'];
          streetAddress = "" + addressComponents[0]['short_name'] + " " + addressComponents[1]['short_name'];
          return _this.getRequestAddressField().setValue(streetAddress);
        } else {
          return console.log('No results found.');
        }
      } else {
        return console.log('Geocoder failed due to: ' + status);
      }
    });
  }
});
