// Generated by CoffeeScript 1.3.3

Ext.define('Purple.controller.PaymentMethods', {
  extend: 'Ext.app.Controller',
  requires: ['Purple.view.EditPaymentMethodForm'],
  config: {
    refs: {
      mainContainer: 'maincontainer',
      topToolbar: 'toptoolbar',
      accountTabContainer: '#accountTabContainer',
      paymentMethods: 'paymentmethods',
      paymentMethodsList: '[ctype=paymentMethodsList]',
      editPaymentMethodForm: 'editpaymentmethodform',
      editPaymentMethodFormHeading: '[ctype=editPaymentMethodFormHeading]',
      backToPaymentMethodsButton: '[ctype=backToPaymentMethodsButton]',
      accountPaymentMethodField: '#accountPaymentMethodField',
      accountPaymentMethodIdField: '#accountPaymentMethodIdField'
    },
    control: {
      paymentMethods: {
        editPaymentMethod: 'showEditPaymentMethodForm',
        loadPaymentMethodsList: 'loadPaymentMethodsList'
      },
      editPaymentMethodForm: {
        backToPaymentMethods: 'backToPaymentMethods',
        saveChanges: 'saveChanges',
        deletePaymentMethod: 'deletePaymentMethod'
      },
      editPaymentMethodFormYear: {
        change: 'yearChanged'
      },
      editPaymentMethodFormMake: {
        change: 'makeChanged'
      },
      accountPaymentMethodField: {
        initialize: 'initAccountPaymentMethodField'
      }
    }
  },
  paymentMethods: null,
  launch: function() {
    return this.callParent(arguments);
  },
  getPaymentMethodById: function(id) {
    var paymentMethod, v, _i, _len, _ref;
    _ref = this.paymentMethods;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      v = _ref[_i];
      if (v['id'] === id) {
        paymentMethod = v;
        break;
      }
    }
    return paymentMethod;
  },
  showEditPaymentMethodForm: function(paymentMethodId) {
    if (paymentMethodId == null) {
      paymentMethodId = 'new';
    }
    this.getAccountTabContainer().setActiveItem(Ext.create('Purple.view.EditPaymentMethodForm', {
      paymentMethodId: paymentMethodId
    }));
    return this.getEditPaymentMethodFormHeading().setHtml(paymentMethodId === 'new' ? 'Add Card' : 'Edit Card');
  },
  backToPaymentMethods: function() {
    this.getAccountTabContainer().setActiveItem(this.getPaymentMethods());
    return this.getAccountTabContainer().remove(this.getEditPaymentMethodForm(), true);
  },
  loadPaymentMethodsList: function() {
    return this.renderPaymentMethodsList(this.paymentMethods);
  },
  renderPaymentMethodsList: function(paymentMethods) {
    var list, p, _i, _len, _results,
      _this = this;
    list = this.getPaymentMethodsList();
    if (!(list != null)) {
      return;
    }
    list.removeAll(true, true);
    _results = [];
    for (_i = 0, _len = paymentMethods.length; _i < _len; _i++) {
      p = paymentMethods[_i];
      _results.push(list.add({
        xtype: 'textfield',
        id: "pmid_" + p.id,
        flex: 0,
        label: "**** **** **** " + v.last4,
        labelWidth: '100%',
        cls: ['bottom-margin'],
        disabled: true,
        listeners: {
          initialize: function(field) {
            return field.element.on('tap', function() {
              var pmid;
              pmid = field.getId().split('_')[1];
              return _this.showEditPaymentMethodForm(pmid);
            });
          }
        }
      }));
    }
    return _results;
  },
  saveChanges: function() {
    var card, paymentMethodId, values,
      _this = this;
    Stripe.setPublishableKey(util.STRIPE_PUBLISHABLE_KEY);
    values = this.getEditPaymentMethodForm().getValues();
    paymentMethodId = this.getEditPaymentMethodForm().config.paymentMethodId;
    values['id'] = paymentMethodId;
    Ext.Viewport.setMasked({
      xtype: 'loadmask',
      message: ''
    });
    card = {
      number: values['card_number'],
      cvc: values['card_cvc'],
      exp_month: values['card_exp_month'],
      exp_year: values['card_exp_year']
    };
    return Stripe.card.createToken(card, function(status, response) {
      var stripe_token;
      if (response.error) {
        Ext.Viewport.setMasked(false);
        return navigator.notification.alert(response.error.message, (function() {}), "Error");
      } else {
        stripe_token = response.id;
        return Ext.Ajax.request({
          url: "" + util.WEB_SERVICE_BASE_URL + "user/edit",
          params: Ext.JSON.encode({
            user_id: localStorage['purpleUserId'],
            token: localStorage['purpleToken'],
            card: {
              stripe_token: stripe_token
            }
          }),
          headers: {
            'Content-Type': 'application/json'
          },
          timeout: 30000,
          method: 'POST',
          scope: _this,
          success: function(response_obj) {
            Ext.Viewport.setMasked(false);
            response = Ext.JSON.decode(response_obj.responseText);
            if (response.success) {
              util.ctl('Vehicles').vehicles = response.vehicles;
              util.ctl('Orders').orders = response.orders;
              this.backToPaymentMethods();
              return this.renderPaymentMethodsList(this.paymentMethods);
            } else {
              return navigator.notification.alert(response.message, (function() {}), "Error");
            }
          },
          failure: function(response_obj) {
            Ext.Viewport.setMasked(false);
            response = Ext.JSON.decode(response_obj.responseText);
            return console.log(response);
          }
        });
      }
    });
  },
  deletePaymentMethod: function(paymentMethodId) {
    Ext.Viewport.setMasked({
      xtype: 'loadmask',
      message: ''
    });
    return Ext.Ajax.request({
      url: "" + util.WEB_SERVICE_BASE_URL + "user/edit",
      params: Ext.JSON.encode({
        user_id: localStorage['purpleUserId'],
        token: localStorage['purpleToken'],
        paymentMethod: {
          id: paymentMethodId,
          active: 0
        }
      }),
      headers: {
        'Content-Type': 'application/json'
      },
      timeout: 30000,
      method: 'POST',
      scope: this,
      success: function(response_obj) {
        var response;
        Ext.Viewport.setMasked(false);
        response = Ext.JSON.decode(response_obj.responseText);
        if (response.success) {
          this.paymentMethods = response.paymentMethods;
          util.ctl('Orders').orders = response.orders;
          this.backToPaymentMethods();
          return this.renderPaymentMethodsList(this.paymentMethods);
        } else {
          return navigator.notification.alert(response.message, (function() {}), "Error");
        }
      },
      failure: function(response_obj) {
        var response;
        Ext.Viewport.setMasked(false);
        response = Ext.JSON.decode(response_obj.responseText);
        return console.log(response);
      }
    });
  },
  initAccountPaymentMethodField: function(field) {
    var _this = this;
    if ((localStorage['purpleDefaultPaymentMethodId'] != null) && localStorage['purpleDefaultPaymentMethodId'] !== '') {
      this.getAccountPaymentMethodIdField().setValue(localStorage['purpleDefaultPaymentMethodId']);
      this.getAccountPaymentMethodField().setValue("asterisked num " + localStorage['purpleDefaultPaymentMethodId']);
    } else {
      this.getAccountPaymentMethodIdField().setValue('');
      this.getAccountPaymentMethodField().setValue("Add/Edit Cards");
    }
    return field.element.on('tap', function() {
      return _this.accountPaymentMethodFieldTap();
    });
  },
  accountPaymentMethodFieldTap: function() {
    return this.getAccountTabContainer().setActiveItem(Ext.create('Purple.view.PaymentMethods'));
  }
});
