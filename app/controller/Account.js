// Generated by CoffeeScript 1.3.3

Ext.define('Purple.controller.Account', {
  extend: 'Ext.app.Controller',
  requires: ['Purple.view.LoginForm'],
  config: {
    refs: {
      mainContainer: 'maincontainer',
      topToolbar: 'toptoolbar',
      accountForm: 'accountform',
      loginForm: 'loginform',
      loginButtonContainer: '#loginButtonContainer',
      registerButtonContainer: '#registerButtonContainer',
      showRegisterButtonContainer: '#showRegisterButtonContainer',
      showLoginButtonContainer: '#showLoginButtonContainer',
      alternativeLoginOptionsText: '#alternativeLoginOptionsText',
      alternativeLoginOptions: '#alternativeLoginOptions'
    },
    control: {
      loginForm: {
        nativeLogin: 'nativeLogin',
        nativeRegister: 'nativeRegister',
        facebookLogin: 'facebookLogin',
        googleLogin: 'googleLogin',
        showRegisterButtonTap: 'showRegisterForm',
        showLoginButtonTap: 'showLoginForm'
      },
      accountForm: {
        logoutButtonTap: 'logout'
      }
    }
  },
  launch: function() {
    return this.callParent(arguments);
  },
  nativeRegister: function() {
    var vals;
    vals = this.getLoginForm().getValues();
    return this.registerUser(vals['email_address'], vals['password']);
  },
  registerUser: function(platformId, authKey) {
    Ext.Viewport.setMasked({
      xtype: 'loadmask',
      message: ''
    });
    return Ext.Ajax.request({
      url: "" + util.WEB_SERVICE_BASE_URL + "user/register",
      params: Ext.JSON.encode({
        platform_id: platformId,
        auth_key: authKey
      }),
      headers: {
        'Content-Type': 'application/json'
      },
      timeout: 30000,
      method: 'POST',
      scope: this,
      success: function(response_obj) {
        var response;
        Ext.Viewport.setMasked(false);
        response = Ext.JSON.decode(response_obj.responseText);
        if (response.success) {
          localStorage['purpleUserType'] = response.user_type;
          localStorage['purpleUserId'] = response.user_id;
          return localStorage['purpleToken'] = response.token;
        } else {
          return Ext.Msg.alert('Error', response.message, (function() {}));
        }
      },
      failure: function(response_obj) {
        var response;
        Ext.Viewport.setMasked(false);
        response = Ext.JSON.decode(response_obj.responseText);
        console.log(response);
        return console.log('login error');
      }
    });
  },
  nativeLogin: function() {
    var vals;
    vals = this.getLoginForm().getValues();
    return this.authorizeUser('native', vals['email_address'], vals['password']);
  },
  authorizeUser: function(type, platformId, authKey) {
    Ext.Viewport.setMasked({
      xtype: 'loadmask',
      message: ''
    });
    return Ext.Ajax.request({
      url: "" + util.WEB_SERVICE_BASE_URL + "user/login",
      params: Ext.JSON.encode({
        type: type,
        platform_id: platformId,
        auth_key: authKey
      }),
      headers: {
        'Content-Type': 'application/json'
      },
      timeout: 30000,
      method: 'POST',
      scope: this,
      success: function(response_obj) {
        var response;
        Ext.Viewport.setMasked(false);
        response = Ext.JSON.decode(response_obj.responseText);
        if (response.success) {
          localStorage['purpleUserType'] = response.user_type;
          localStorage['purpleUserId'] = response.user_id;
          return localStorage['purpleToken'] = response.token;
        } else {
          return Ext.Msg.alert('Error', response.message, (function() {}));
        }
      },
      failure: function(response_obj) {
        var response;
        Ext.Viewport.setMasked(false);
        response = Ext.JSON.decode(response_obj.responseText);
        console.log(response);
        return console.log('login error');
      }
    });
  },
  facebookLogin: function() {
    var _this = this;
    return facebookConnectPlugin.getLoginStatus((function(result) {
      if (result['status'] === 'connected') {
        return _this.authorizeUser('facebook', result['authResponse']['userID'], result['authResponse']['accessToken']);
      } else {
        return facebookConnectPlugin.login(["email"], Ext.bind(_this.facebookLoginSuccess, _this), Ext.bind(_this.facebookLoginFailure, _this));
      }
    }), (function() {
      return console.log('error', arguments);
    }));
  },
  facebookLoginSuccess: function(result) {
    console.log('facebookLoginSuccess');
    return this.authorizeUser('facebook', result['authResponse']['userID'], result['authResponse']['accessToken']);
  },
  facebookLoginFailure: function(errorStr) {
    return alert('Facebook login error: ', errorStr);
  },
  showRegisterForm: function() {
    this.getLoginButtonContainer().hide();
    this.getShowRegisterButtonContainer().hide();
    this.getShowLoginButtonContainer().show();
    return this.getRegisterButtonContainer().show();
  },
  showLoginForm: function() {
    this.getShowLoginButtonContainer().hide();
    this.getRegisterButtonContainer().hide();
    this.getLoginButtonContainer().show();
    return this.getShowRegisterButtonContainer().show();
  },
  logout: function() {
    console.log('logout');
    delete localStorage['purpleUserType'];
    delete localStorage['purpleUserId'];
    return delete localStorage['purpleToken'];
  }
});
