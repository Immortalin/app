// Generated by CoffeeScript 1.10.0
Ext.define('Override.ux.Map', {
  override: 'Ext.Map',
  initMap: function() {
    var element, event, gm, map, mapOptions, me;
    map = this.getMap();
    if (!map) {
      gm = (window.google || {}).maps;
      if (!gm) {
        return null;
      }
      element = this.mapContainer;
      mapOptions = this.getMapOptions();
      event = gm.event;
      me = this;
      if (element.dom.firstChild) {
        Ext.fly(element.dom.firstChild).destroy();
      }
      if (Ext.os.is.iPad) {
        Ext.merge({
          navigationControlOptions: {
            style: gm.NavigationControlStyle.ZOOM_PAN
          }
        }, mapOptions);
      }
      mapOptions.mapTypeId = mapOptions.mapTypeId || gm.MapTypeId.ROADMAP;
      mapOptions.center = mapOptions.center || new gm.LatLng(37.381592, -122.135672);
      if (mapOptions.center && mapOptions.center.latitude && !Ext.isFunction(mapOptions.center.lat)) {
        mapOptions.center = new gm.LatLng(mapOptions.center.latitude, mapOptions.center.longitude);
      }
      mapOptions.zoom = mapOptions.zoom || 12;
      map = new gm.Map(element.dom, mapOptions);
      this.setMap(map);
      event.addListener(map, 'zoom_changed', Ext.bind(me.onZoomChange, me));
      event.addListener(map, 'maptypeid_changed', Ext.bind(me.onTypeChange, me));
      event.addListener(map, 'center_changed', Ext.bind(me.onCenterChange, me));
      event.addListenerOnce(map, 'tilesloaded', Ext.bind(me.onTilesLoaded, me));
      event.addListener(map, 'dragstart', Ext.bind(me.onDragStart, me));
      this.addMapListeners();
    }
    return this.getMap();
  },
  onDragStart: function() {
    return this.fireEvent('dragstart');
  }
});
